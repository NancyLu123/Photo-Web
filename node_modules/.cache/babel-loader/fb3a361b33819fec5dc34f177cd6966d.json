{"ast":null,"code":"var t = function t(_t) {\n    return \"object\" == typeof _t && null != _t && 1 === _t.nodeType;\n  },\n  e = function e(t, _e) {\n    return (!_e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t;\n  },\n  n = function n(t, _n) {\n    if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n      var _o = getComputedStyle(t, null);\n      return e(_o.overflowY, _n) || e(_o.overflowX, _n) || function (t) {\n        var e = function (t) {\n          if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n          try {\n            return t.ownerDocument.defaultView.frameElement;\n          } catch (t) {\n            return null;\n          }\n        }(t);\n        return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n      }(t);\n    }\n    return !1;\n  },\n  o = function o(t, e, n, _o2, i, l, r, d) {\n    return l < t && r > e || l > t && r < e ? 0 : l <= t && d <= n || r >= e && d >= n ? l - t - _o2 : r > e && d < n || l < t && d > n ? r - e + i : 0;\n  },\n  i = function i(t) {\n    var e = t.parentElement;\n    return null == e ? t.getRootNode().host || null : e;\n  },\n  l = function l(e, _l2) {\n    var r, d, s, h;\n    if (\"undefined\" == typeof document) return [];\n    var c = _l2.scrollMode,\n      f = _l2.block,\n      u = _l2.inline,\n      a = _l2.boundary,\n      g = _l2.skipOverflowHiddenElements,\n      m = \"function\" == typeof a ? a : function (t) {\n        return t !== a;\n      };\n    if (!t(e)) throw new TypeError(\"Invalid target\");\n    var p = document.scrollingElement || document.documentElement,\n      w = [];\n    var W = e;\n    for (; t(W) && m(W);) {\n      if (W = i(W), W === p) {\n        w.push(W);\n        break;\n      }\n      null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n    }\n    var H = null != (d = null == (r = window.visualViewport) ? void 0 : r.width) ? d : innerWidth,\n      b = null != (h = null == (s = window.visualViewport) ? void 0 : s.height) ? h : innerHeight,\n      _window = window,\n      v = _window.scrollX,\n      y = _window.scrollY,\n      _e$getBoundingClientR = e.getBoundingClientRect(),\n      E = _e$getBoundingClientR.height,\n      M = _e$getBoundingClientR.width,\n      x = _e$getBoundingClientR.top,\n      I = _e$getBoundingClientR.right,\n      C = _e$getBoundingClientR.bottom,\n      R = _e$getBoundingClientR.left;\n    var T = \"start\" === f || \"nearest\" === f ? x : \"end\" === f ? C : x + E / 2,\n      V = \"center\" === u ? R + M / 2 : \"end\" === u ? I : R;\n    var k = [];\n    for (var _t2 = 0; _t2 < w.length; _t2++) {\n      var _e2 = w[_t2],\n        _e$getBoundingClientR2 = _e2.getBoundingClientRect(),\n        _n2 = _e$getBoundingClientR2.height,\n        _i = _e$getBoundingClientR2.width,\n        _l = _e$getBoundingClientR2.top,\n        _r = _e$getBoundingClientR2.right,\n        _d = _e$getBoundingClientR2.bottom,\n        _s = _e$getBoundingClientR2.left;\n      if (\"if-needed\" === c && x >= 0 && R >= 0 && C <= b && I <= H && x >= _l && C <= _d && R >= _s && I <= _r) return k;\n      var _h = getComputedStyle(_e2),\n        _a = parseInt(_h.borderLeftWidth, 10),\n        _g = parseInt(_h.borderTopWidth, 10),\n        _m = parseInt(_h.borderRightWidth, 10),\n        _W = parseInt(_h.borderBottomWidth, 10);\n      var B = 0,\n        D = 0;\n      var L = \"offsetWidth\" in _e2 ? _e2.offsetWidth - _e2.clientWidth - _a - _m : 0,\n        S = \"offsetHeight\" in _e2 ? _e2.offsetHeight - _e2.clientHeight - _g - _W : 0,\n        X = \"offsetWidth\" in _e2 ? 0 === _e2.offsetWidth ? 0 : _i / _e2.offsetWidth : 0,\n        Y = \"offsetHeight\" in _e2 ? 0 === _e2.offsetHeight ? 0 : _n2 / _e2.offsetHeight : 0;\n      if (p === _e2) B = \"start\" === f ? T : \"end\" === f ? T - b : \"nearest\" === f ? o(y, y + b, b, _g, _W, y + T, y + T + E, E) : T - b / 2, D = \"start\" === u ? V : \"center\" === u ? V - H / 2 : \"end\" === u ? V - H : o(v, v + H, H, _a, _m, v + V, v + V + M, M), B = Math.max(0, B + y), D = Math.max(0, D + v);else {\n        B = \"start\" === f ? T - _l - _g : \"end\" === f ? T - _d + _W + S : \"nearest\" === f ? o(_l, _d, _n2, _g, _W + S, T, T + E, E) : T - (_l + _n2 / 2) + S / 2, D = \"start\" === u ? V - _s - _a : \"center\" === u ? V - (_s + _i / 2) + L / 2 : \"end\" === u ? V - _r + _m + L : o(_s, _r, _i, _a, _m + L, V, V + M, M);\n        var _t3 = _e2.scrollLeft,\n          _h2 = _e2.scrollTop;\n        B = Math.max(0, Math.min(_h2 + B / Y, _e2.scrollHeight - _n2 / Y + S)), D = Math.max(0, Math.min(_t3 + D / X, _e2.scrollWidth - _i / X + L)), T += _h2 - B, V += _t3 - D;\n      }\n      k.push({\n        el: _e2,\n        top: B,\n        left: D\n      });\n    }\n    return k;\n  };\nexport { l as compute };","map":{"version":3,"sources":["../src/index.ts"],"names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","ownerDocument","defaultView","frameElement","e","frame","clientHeight","scrollHeight","clientWidth","scrollWidth","isScrollable","getComputedStyle","style","overflowY","overflowX","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","getParentElement","element","parent","parentElement","getRootNode","host","compute","target","options","document","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","push","body","viewportWidth","visualViewport","width","_b","viewportHeight","height","_d","scrollX","scrollY","window","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","targetInline","computations","index","length","borderLeft","parseInt","frameStyle","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","offsetWidth","scrollbarHeight","offsetHeight","scaleX","scaleY","targetBlock","Math","max","scrollbarWidth","scrollLeft","scrollTop","min"],"mappings":"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","sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module"}